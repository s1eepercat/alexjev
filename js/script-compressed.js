const about__text = document.querySelectorAll(".about__text"); setTimeout(function () { about__text.forEach(a => { a.style.display = "block" }) }, 500), document.getElementById("about-toggle").checked = !1; const canvas = document.getElementById("canvas"), ctx = canvas.getContext("2d"), body = document.getElementById("body"); canvas.width = body.scrollWidth, canvas.height = body.scrollHeight; let particlesArray, mouse = { x: null, y: null, radius: 100 }; window.addEventListener("mousemove", a => { mouse.x = a.pageX, mouse.y = a.pageY }); class Particle { constructor(a, b, c, d, e, f) { this.x = a, this.y = b, this.directionX = 0, this.directionY = d, this.size = e, this.color = f } draw() { ctx.beginPath(), ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI, !1), ctx.fillStyle = "#121212", ctx.fill() } update() { (this.x > canvas.width || 0 > this.x) && (this.directionX = -this.directionX), (this.y > canvas.height || 0 > this.y) && (this.directionY = -this.directionY), this.y > canvas.height + 15 && (this.y = 0, this.directionY = Math.abs(this.directionY)); let a = mouse.x - this.x, b = mouse.y - this.y, c = Math.sqrt(a * a + b * b); c < mouse.radius + this.size && (mouse.x < this.x && this.x < canvas.width - 10 * this.size && (this.x += 10, this.directionX = -this.directionX), mouse.x > this.x && this.x > 10 * this.size && (this.x -= 10, this.directionX = -this.directionX), mouse.y < this.y && this.y < canvas.height - 10 * this.size && (this.y += 10, this.directionY = -this.directionY), mouse.y > this.y && this.y > 10 * this.size && (this.y -= 10, this.directionY = -this.directionY)), this.x += this.directionX, this.y += this.directionY, this.draw() } } const init = () => { particlesArray = []; let a = .65 * (canvas.height * canvas.width / 9e3); 50 > a && (a = 60); for (let b = 0; b < a; b++) { let a = 1 * Math.random() + 1, b = Math.random() * (innerWidth - 2 * a - 2 * a) + 2 * a, c = Math.random() * (innerHeight - 2 * a - 2 * a) + 2 * a, d = 5 * Math.random() - 2.5, e = 5 * Math.random() - 2.5; particlesArray.push(new Particle(b, c, d, e, a, "#121212")) } }, connect = () => { let c = 1; for (let d = 0; d < particlesArray.length; d++)for (let a, e = d; e < particlesArray.length; e++)a = (particlesArray[d].x - particlesArray[e].x) * (particlesArray[d].x - particlesArray[e].x) + (particlesArray[d].y - particlesArray[e].y) * (particlesArray[d].y - particlesArray[e].y), a < canvas.width / 9 * (canvas.height / 9) && (c = 1 - a / 2e4, ctx.strokeStyle = "rgba(18,18,18," + c + ")", ctx.lineWidth = 1, ctx.beginPath(), ctx.moveTo(particlesArray[d].x, particlesArray[d].y), ctx.lineTo(particlesArray[e].x, particlesArray[e].y), ctx.stroke()) }, animate = () => { requestAnimationFrame(animate), ctx.clearRect(0, 0, body.scrollWidth, body.scrollHeight); for (let a = 0; a < particlesArray.length; a++)particlesArray[a].update(); connect() }; window.addEventListener("mouseout", () => { mouse.x = void 0, mouse.y = void 0 }), init(), animate(); let canvasOriginalHeight = canvas.height, isTouchScreen = 0; window.addEventListener("touchstart", () => { isTouchScreen = 1 }); let orientationChanged = 0; window.addEventListener("orientationchange", () => { orientationChanged = 1 }), window.addEventListener("resize", () => { 0 === isTouchScreen && 0 === orientationChanged ? resize() : (0 === isTouchScreen && 1 == orientationChanged || 1 === isTouchScreen && 1 == orientationChanged) && (orientationChanged = 0, resize()) }); function resize() { let a = document.getElementById("footer").offsetHeight; canvas.width = body.scrollWidth, canvas.height = body.scrollHeight - a, setTimeout(function () { canvas.width = body.scrollWidth, canvas.height = body.scrollHeight - a, canvasOriginalHeight = canvas.height }, 250); const b = document.getElementById("projects-container"); b.classList.add("notransition"), document.getElementById("projects-toggle").checked = !1, b.offsetHeight, b.classList.remove("notransition"), init() } const resizeProjects = () => { canvas.height === canvasOriginalHeight && setTimeout(function () { canvas.height = body.scrollHeight }, 600), canvas.height > canvasOriginalHeight && (canvas.height = canvasOriginalHeight, setTimeout(function () { canvas.height = body.scrollHeight }, 600)) }; document.getElementById("projects-toggle").addEventListener("input", resizeProjects);